[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bathyu"
dynamic = ["version"]
maintainers = [
    {name = "Erik van Onselen", email = "erik.vanonselen@deltares.nl"},
]
description = "Ultility functions for working with and combining bathymetric datasets"
readme = "README.md"
license = {file = "LICENSE"}
keywords = [
    "bathyu",
    "bathymetry",
    "multibeam",
    "singlebeam",
    "mbes",
    "raster",
    "deltares", 
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.12"
dependencies = [
    "numpy",
	"scipy",
    "pandas",
    "geopandas",
	"xarray",
	"rioxarray",
	"numba", 
	"dask",
	"matplotlib",
    "h5netcdf",
]

[project.urls]
Homepage = ""
Repository = ""
Issues = ""

[tool.hatch.version]
path = "bathyu/__init__.py"

[tool.hatch.build.targets.sdist]
only-include = ["bathyu", "tests"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
python = ">=3.12"
numpy = "*"
pandas = "*"
geopandas = "*"
black = "*"
pytest = "*"
pytest-cov = "*"
ruff = "*"
sphinx = "*"
pip = "*"
rioxarray = "*"
xarray = "*"
netcdf4 = "*"
dask = "*"
numba = "*"
myst-parser = "*"
pydata-sphinx-theme = "*"
sphinx-design = "*"
myst-nb = "*"
h5netcdf = "*"
tqdm = "*"
bottleneck = "*"

[tool.pixi.pypi-dependencies]
bathyu = { path = ".", editable = true }

[tool.pixi.tasks]
test = "python -m pytest --verbose --cov=bathyu --cov-report xml --cov-report term"
docs = "sphinx-build -b html docs ./docs/build"
format = "black ."
lint = "ruff check --fix ./bathyu"
rm_jupyter = "rm -r ./docs/jupyter_execute"
rm_build = "rm -r ./docs/build"
rm_generated = "rm -r ./docs/api_reference/generated"
rebuild_docs = { depends_on = ["rm_jupyter", "rm_build", "rm_generated", "docs"] }

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"


[tool.pixi.environments]
default = { features = ["py312"], solve-group = "py312" }
py312 = { features = ["py312"], solve-group = "py312" }


[tool.pytest.ini_options]
testpaths = [
    "tests",
]
markers = [
	"unittest: test of single component",
	"integrationtest: test of multiple components",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
]

[tool.black]
line-length = 88

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["F", "E", "W", "N", "I001"]
ignore = ["F401", "E501", "F811"]
unfixable = ["F401"]
pydocstyle.convention = "numpy"
